# <CODEC=OEM866>
# В этом make-файле списки зависимостей для объектных файлов составляются
# автоматически. Так как make не умеет сама собирать сведения о подключаемых
# заголовках, то большую часть работы следует поручить компилятору,
# который позволяет получать списки зависимостей для утилиты make через опции
# семейства -M* (-M -MM -MD -MMD).

# Этот make-файл может использоваться для автоматической сборки проектов 
# средних размеров типа подключаемых модулей.

# ВНИМАНИЕ:
# минусом такого подхода является, то, что директива include обрабатывается
# make раньше, чем выполняется правило. Т.е. если вы удалите заголовок, от 
# которого кто-то зависел, то сборка окажется неудачной. В этом случае
# следует удалить все объектные файлы и файлы зависимостей и пересобрать
# проект заново.

DEFINE	= 
CFLAGS	= -Wall -std=gnu++11 -g
#-O3
LIBS 	= 
L_LIBS	= -lstdc++
#L_LIBS	= -lstdc++ -lshlwapi	# for windows
LFLAGS	= -pipe -pthread
APP	= test

SOURCE_DIRS := .
INCLUDES := .

LINK := g++

# Генерация путей к файлам
SOURCES	:= := $(wildcard $(addsuffix /*.cpp, $(SOURCE_DIRS)))

# Генерация списка объектных файлов
#OBJECT_LIST := $(notdir $(SOURCES))
#OBJECT_LIST := $(OBJECT_LIST:.cpp=.o)

# Опция -MD в правиле говорит о необходимости генерирования .d-файлов, которые
# хранят зависимости объектных файлов от заголовков. Опция -MD требует генерации
# зависимостей как от заголовков, подключаемых как #include <>, так и для 
# #include "". Буква D говорит, что компилятор не должен прерывать компиляцию,
# после генерирования .d-файла, как это делают опции -M и -MM. Если вы не хотите
# генерировать зависимости от базовых библиотек (подключаемых через <>), то
# используйте опции с одной М
# Файлы генерируются в понятном для make формате и обычно подключаеются в конце
# make-файла.
%.o: %.cpp
	$(LINK) -c -MD $(CFLAGS) $(DEFINE) $(addprefix -I, $(INCLUDES)) -o $@ $<

# ЗАДАЧИ

$(APP): $(patsubst %.cpp, %.o, $(wildcard *.cpp))
	$(LINK) $^ $(LFLAGS) -o $@ $(LIBS) $(L_LIBS)

# Генерация объектных файлов

.PHONY: clean
clean:
	rm -vf *.o
	rm -vf *.d
	
# Эта команда говорит подключить к файлу сборки все файлы зависимостей от заголовков,
# сгенерированные компилятором. Всегда используйте команду wildcard так как
# отсутствие этих файлов не провоцирует ошибку сборки.
include $(wildcard *.d) 

